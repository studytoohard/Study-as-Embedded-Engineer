-------------------------2017/11/15----
	视图：
		 视图是数据库中的虚拟表。在视图中存放的是从数据库中查询出来的记录，使用视图主要是方便信息查询，也能够缩短查询数据的时间。		 
	存储过程：
		 存储过程是由SQL语句和控制流语句组成的语句块，存储过程储存在数据库内，可由应用程序通过存储过程的名称调用执行。（对于大量的数据操作只需返回需要的数据，减少了数据的传输量，速度也可以大大提升）
	触发器：
		 触发器是特殊的储存过称，但是在数据库中不需要调用而自动执行		 
	约束：约束是数据库中保证表中数据完整性的手段。
		主键约束：
			在每个数据表中只能有一个，但是一个主键约束可以由多个列组成，通常把由多个列组成的主键又叫做复合主键或组合主键。主键约束可以保证主键列的数据没有重复值且不为空。
		外键约束：
			外键约束之所以被认为是参照约束，是因为它主要用作把一个表中的数据和另一个表中的数据进行关联，表和表之间的关联是为了保证数据的完整性，使用外键保证数据的完整性，也叫参照的完整性。
		唯一约束：
			唯一约束和主键约束一样都是设置表中列不能重复的约束，区别就是一个表中只能有一个主键约束，却可以有多个唯一约束。通常情况下设置唯一约束的目的就是使非主键列没有重复值。唯一约束和主键约束的另一个区别是如果数据表中的某一列中有空值，那么就不能把这个列设置为主键列，而可以设置为唯一约束。
		检查约束：
			检查约束是用来指定表中列的值的取值范围的。当输入的值不在有效范围内时，就会出现错误。这样就保证了数据库中的数据的有效性。
		非空约束：

	数据库设计的完整性：
		实体完整性:
			要求表中主键字段不能为重复值或者空。
		区域完整性：
			区域完整性是保证输入到数据库中的数据是在有效范围内的，可以使用检查约束来设置。
		参照完整性：
			参照完整性可以保证数据库中相关联的表的数据的正确性，可以用外键约束来约束

	范式-设计关系型数据库的准则
		第一范式：
			数据库表中的字段都是单一属性的，不可再分。
		第二范式：
			数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖。第二范式中组合主键(AB)里面的A或者B与其他字段不能存在组合重复
			违反后果：数据冗余、更新异常、插入异常、删除异常
			常用手段：分表、增加编号列
		第三范式：
			数据库表中不存在非关键字段对任一候选关键字段的传递函数依赖。如果存在A决定B，B决定C，则C传递函数依赖于A
		BCNF：
			数据库表中不存在任何字段对任一候选关键字段的传递函数依赖。
	E-R：Entity-Relationship

-------------------------2017/11/15----
	为表列添加注释
		COMMENT ON COLUMN chentw.TF_B_PRODUCT.REMARK IS '备注';
	增加/修改表列
		ALTER TABLE chentw.TF_B_PRODUCT ADD/MODIFY remark VARCHAR2(200);
	删除表列
		ALTER TABLE chentw.TF_B_PRODUCT DROP COLUMN remark;
	修改表名
		ALTER TABLE chentw.TF_B_PRODUCT1 RENAME to TF_B_PRODUCT;
	修改列名
		ALTER TABLE chentw.TF_B_PRODUCT RENAME COLUMN REMARK1 to remark;
    添加主键
		ALTER TABLE chentw.TF_F_GATEGORY ADD CONSTRAINT PK_TF_F_CATEGORY PRIMARY KEY(CATEGORYID);
	删除主键
		ALTER TABLE chentw.TF_F_GATEGORY DROP CONSTRAINT PK_TF_F_CATEGORY;
	
-------------------------2017/11/18----
	添加外键
		ALTER TABLE chentw.TF_F_PRODUCT ADD CONSTRAINT fk_product_gategory FOREIGN KEY(category) REFERENCES chentw.TF_F_GATEGORY(CATEGORYID) ON DELETE CASCADE; cascade级联
	检查约束
		ALTER TABLE chentw.TF_F_CUSTOMINFO ADD CONSTRAINT chk_age CHECK(age<=50 AND age >=18);
	唯一约束
		alter table TF_B_ORDER add constraint UNQ_ORDERID unique (ORDERID)
	
	外键在引用表中关联的列不一定是主键,但必须是唯一性索引。 主键约束和唯一性约束都是唯一性索引。

	非空约束 
		ALTER TABLE chentw.TF_F_MANAGER MODIFY loginname NOT NULL;

-------------------------2017/11/20----	
	TRUNCATE语句
		TRUNCATE TABLE chentw.TF_F_MANAGER;相比delete from chentw.TF_F_MANAGER;删除速度快,不会请求commit,会直接清空表
	MERGE语句
		MERGE INTO CHENTW.TF_F_LOGIN T USING CHENTW.TF_F_MANAGER Q ON (T.LOGINID = Q.MANAGERID) WHEN MATCHED THEN UPDATE SET T.PASSWORD = Q.PASSWORD WHEN NOT MATCHED THEN INSERT VALUES (Q.MANAGERID, Q.PASSWORD);
		ORA-38104：MERGE中ON的比较列不可以在后面的更新中出现
	1.SUBSTR(COLUMN, INDEX_S, INDEX_E)截取COLUMN字段的第INDEX_S到INDEX_E位，下标第一位为1
	2.DISTINCT(COLUMN)查询去除重复COLUMN的数据，其他查询项如果有不同则不能去重
	3.SELECT * FROM TABLE_NAME ORDER BY COLUMN ASC(升序)/DESC(降序)
		ASC是默认排序方式
	4.SELECT * FROM TABLE_NAME ORDER BY COLUMN NULLS FIRST(null值最前)/LAST(null值最后)
		默认NULL最大
	5.可以用表达式做为排序方式（乘积），NULL值与其他值相乘结果还是NULL
	6.如果排序顺序不是确定性的，即可能有重复的值，则在每个具有相同值的组中，由于与上述相同的原因，该顺序是“随机的”。确保确定性顺序的唯一方法是在ORDER BY子句中包含保证的唯一列或列组（例如主键）。
	7.使用字段的位置做为排序字段，一是为了方便，二是为了防止使用UNION时出错
	8.利用多个字段进行排序，可以单独为每个字段指定排序方式，而且别名、表达式和位置可以混用

-------------------------2017/11/23----
	子查询返回多行
		any任一个，不能和<>一起用，会返回所有
		some某个，不能和<>一起用，会返回所有
		all所有
	内连接 
		INNER JOIN 可以直接写成 JOIN
		SELECT * from chentw.TF_F_PRODUCT a INNER JOIN chentw.TF_F_GATEGORY b ON a.CATEGORY=b.CATEGORYID;
		自连接
			通过自连接可以做到筛选一个表
			ROWID可以去重
			SELECT *
  			FROM CHENTW.TF_F_PRODUCT A, CHENTW.TF_F_PRODUCT B
			WHERE A.QUANTITY = B.QUANTITY
   			AND A.PRODUCTID != B.PRODUCTID
   			AND a.ROWID<=b.ROWID
   	外连接
   		左/右外连接可以用(+)
   		满外连接不可以用，只能如下
   		SELECT *
  		FROM CHENTW.TF_F_PRODUCT A
  		FULL OUTER JOIN CHENTW.TF_F_GATEGORY B
    		ON A.CATEGORY = B.CATEGORYID

-------------------------2017/11/25----
	数值型函数
		ABS() 绝对值函数 absolute value
		MOD(A1, A2) 取余函数,A2为0则返回A1 Modulo 取模
		SIGN(A) 判断正负数函数,正数返回1,负数返回-1,0返回0
		TAN(A)、ATAN(A)、TANH(A) 正切，反正切，双曲正切（类似有正弦SIN，余弦COS）
		CEIL(A) 返回>=A的最小整数
		FLOOR(A) 返回<=A的最大整数
		SQRT(A) 返回A的平方根
		POWER(A,B) 返回A的B次方
		LOG(A,B) 返回以A为底B的对数
		LN(A) 返回以e为底A的对数	
-------------------------2017/11/26----
		ROUND(A, B) 返回四舍五入的A，B默认为0，对小数点前(-) |B| 位四舍五入或是四舍五入到小数点后(+)B位
		TRUNC(A, B) 返回截断的A，B默认为0，对小数点前(-) |B| 位截断或是截断到小数点后(+)B位
	字符型函数
		CHR(ascii) 返回ascii值对应的字符
		ASCII(char) 返回char对应的ascii值
		LENGTH(string) 返回string长度
		SUBSTR(string, index, length) 从下标为index(+从左,-从右)开始截取string中一段长为length的字符串(下标从1开始)
		CONCAT(str1, str2) 拼接str1和str2只允许两个参数，更常用'str1' || 'str2' || 'str3'拼接
		INSTR('str1','str2', A, B) 在str1中从左(+) |A| 位开始或右(-) |A| 位开始第B次出现的str2首字符在str1中的下标
-------------------------2017/11/27----		
		UPPER(string) 将string变为大写
		LOWER(string) 将string变为小写
		INITCAP(str) 将str中每个单词首字母变成大写
		NLS National Language Support 
		nlsparam 修改Oracle内部函数定义的宏
		NLSSORT(productname,'NLS_SORT=SCHINESE_PINYIN_M') 带排序参数的排序函数
		REPLACE(str1, str2, str3) 将str1中搜索到的str2字符串用str3替换,默认str3为空('')
		RPAD(str1, num, str2) 将str1从末尾填充str2到num位止,str2默认为空格(' ')
		LPAD(str1, num, str2) 将str1从开头填充str2到num位止,str2默认为空格(' ')
		TRIM(LEADING|TRAILING|BOTH char from str1) 从str1的头部(LEADING)/尾部(TRAILING)/两侧(BOTH)去除char,默认char为空格(' ')
		NLS_CHARSET_NAME(1) 返回参数id对应的字符集名称
		NLS_CHARSET_ID('us7ascii') 返回参数对应的字符集id
	日期型函数
		SYSDATE 数据库时间
		SYSTIMESTAMP 带时区信息的数据库系统时间
		DBTIMEZONE 数据库时区
		SESSIONTIMEZONE 当前会话的时区
		ADD_MONTHS(Date, Integer) 返回Date+Integer月的日期
		LAST_DAY(Date) 返回Date月的最后一天(Date带时分秒则返回值带时分秒)
		NEXT_DAY(Date, DayOfWeek) 返回Date日期下的下一个DayOfWeek的日期
		CURRENT_DATE 返回会话所在时区当前日期
		CURRENT_TIMESTAMP 返回会话所在时区当前时间戳
		1.EXTRACT(SECOND FROM TO_TIMESTAMP(TO_CHAR(SYSDATE,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss'))
		2.EXTRACT(MINUTE FROM current_timestamp) 返回时间戳TIMESTAMP中的日期特定部分
		MONTHS_BETWEEN(date1, date2) 返回date1和date2之间的月份数(精确到小数),date1>date2返回+否则-
		NEW_TIME(date, timezone1, timezone2) 
		TRUNC(date, fmt) 截取到年('yyyy'|'yy')/月('mm')/日('dd')/星期天('d')/时('hh')/分('mi')
		ROUND(date, fmt) 四舍五入到年('yyyy'|'yy')/月('mm')/日('dd')/星期天('d')/时('hh')/分('mi'),从后一位进位到fmt
		