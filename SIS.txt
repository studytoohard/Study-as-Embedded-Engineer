-------------------------2017/10/27----	
	AOP：Aspect Oriented Programming 面向切片编程 aspect 方面
	IOC：Inversion of Control 控制反转
	POJO（Plain Ordinary Java Object）简单的Java对象

-------------------------2017/10/31----
	修改的html自动刷新
	-Dorg.apache.tapestry.disable-caching=true -Dorg.apache.tapestry.enable-reset-service=true

-------------------------2017/11/12----
	DI能够让相互协作的软件组件保持松散耦合， 而面向切面编程
	（aspect-oriented programming， AOP） 允许你把遍布应用各处的功能
	分离出来形成可重用的组件。

	ORM（Object-Relational Mapping）
	JMS（Java Message Service）

	Spring模块：1.Spring核心容器
				2.Spring的AOP模块
				3.数据访问与集成
				4.Web与远程调用
				5.Instrumentation 
				6.测试
	Spring Portfolio：Spring组合包

-------------------------2017/11/14----
	构造器注入Bean引用
   "1. <constructor-arg ref="compactDisc" />
	2. <bean id="cdPlayer" class="soundsystem.CDPlayer" c:cd-ref="compactDisc" />
    3. <bean id="cdPlayer" class="soundsystem.CDPlayer" c:_-ref="compactDisc" />

    该选择构造器注入还是属性注入呢？作为一个通用的规则，我倾向于对强依赖使用构造器注入，而对可选性的依赖使用属性注入。
    Spring XML实现属性注入
    在JavaConfig中引用XML配置 @ContextConfiguration(classes=SoundSystemConfig.class)
    @Import(CDPlayerConfig.class)
	@ImportResource("classpath:main/resources/cd-config.xml")
    在XML配置中引用JavaConfig @ContextConfiguration("classpath:main/resources/cdplayer-config.xml")
    <bean class="soundsystem.CDConfig" />
    <import resource="cdplayer-config.xml"/>"

-------------------------2017/11/16----
	JNDI：Java命名和目录接口 Java Naming and Directory Interface
	记得看注释
	@Profile 注解指定某个bean属于哪一个profile。 
	@ActiveProfiles 注解，我们可以使用它来指定运行测试时要激活哪个profile。 
	@Conditional 注解，它可以用到带有@Bean注解的方法上。 如果给定的条件计算结果为true， 就会创建这个bean，否则的话， 这个bean会被忽略。
	@Autowired 注解，自动装配
	@Component 注解，在@ComponentScan组件扫描的时候， 能够发现它们并将其创建为Spring应用上下文里面的bean。 
	@Primary 能够与@Component组合用在组件扫描的bean上，也可以与@Bean组合用在Java配置的bean声明中。 将@Component注解的IceCream bean声明为首选的bean
	@Qualifier 注解是使用限定符的主要方式。 它可以与@Autowired和@Inject协同使用， 在注入的时候指定想要注入进去的是哪个bean。 

	在默认情况下， Spring应用上下文中所有bean都是作为以单例（singleton） 的形式创建的。 也就是说， 不管给定的一个bean被注入到其他bean多少次， 每次所注入的都是同一个实例。

	@ComponentScan(excludeFilters={@Filter(type=FilterType.ANNOTATION, value=Configuration.class)})过滤掉有@Configuration注解的类（如果里面有@Bean则不会冲突）

-------------------------2017/11/18----
	单例（Singleton）： 在整个应用中， 只创建bean的一个实例。
	原型（Prototype）： 每次注入或者通过Spring应用上下文获取的
	时候， 都会创建一个新的bean实例。
	会话（Session）： 在Web应用中， 为每个会话创建一个bean实
	例。
	请求（Rquest）： 在Web应用中， 为每个请求创建一个bean实
	例。
	@Scope 声明bean类型
	@PropertySource("classpath:/com/soundsystem/app.properties")声明属性源
	
	env.getRequiredProperty("disc.artist"));得到的属性必须要定义否则抛出IllegalStateException异常
	@Test(expected=BeanCreationException.class)表示期望抛出的一个异常
	@Value()指定占位符用于组件扫描和自动装配来创建和初始化应用组件
	xml方式解析占位符<context:property-placeholder location="com/soundsystem/app.properties" />
	SpringEL：#{T(java.lang.Math).random()}
面向切片的Spring
	1.在软件开发过程中，散布于应用多处的功能被称为横向关注点（cross-cutting-concern）如：日志、安全、事务管理
	2.重用通用功能最常见的面向对象技术是继承（inheritance）或委托（delegation）但是， 如果在整个应用中都使用相同的基类，继承往往会导致一个脆弱的对象体系； 而使用委托可能需要对委托对象进行复杂的调用。切面提供了取代继承和委托的另一种可选方案， 而且在很多场景下更清晰简洁。在使用面向切面编程时，我们仍然在一个地方定义通用功能， 但是可以通过声明的方式定义这个功能要以何种方式在何处应用， 而无需修改受影响的类。 横切关注点可以被模块化为特殊的类，这些类被称为切面（aspect）。这样做有两个好处： 首先， 现在每个关注点都集中于一个地方，而不是分散到多处代码中；其次，服务模块更简洁， 因为它们只包含主要关注点（或核心功能）的代码，而次要关注点的代码被转移到切面中了。
	3.切面实现了横切关注点（跨多个应用对象的逻辑） 的模块化

-------------------------2017/11/21----	
	描述切面的术语:
		通知(ACTIVE)
			切面的工作称为通知，通知定义了切面是什么以及何时使用。
			五种类型的通知：
				前置通知（Before）：
				后置通知（After）：
				返回通知（After-returning）：
				异常通知（After-throwing）：
				环绕通知（Around）：
		连接点(Join point)
			可以应用通知的时机被称为连接点
		切点(Pointcut)
			切点定义了切面在何处通知
		切面(Aspect)
			切面是通知和切点的结合
		引入(Introduction)
			引入允许我们向现有的类添加新方法或属性。新方法和实例变量可以被引入到现有的类中，从而可以在无需修改这些现有的类的情况下，让他们具有新的行为和状态。
		织入(Weaving)
			织入是把切面应用到目标对象并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期里有多个点可以进行织入：
			1.编译期： 切面在目标类编译时被织入。 这种方式需要特殊的编译器。 AspectJ的织入编译器就是以这种方式织入切面的。
			2.类加载期： 切面在目标类加载到JVM时被织入。 这种方式需要特殊的类加载器（ClassLoader） ， 它可以在目标类被引入应用之前增强该目标类的字节码。 AspectJ 5的加载时织入（load-time weaving， LTW） 就支持以这种方式织入切面。
			3.运行期： 切面在应用运行的某个时刻被织入。 一般情况下， 在织入切面时， AOP容器会为目标对象动态地创建一个代理对象。Spring AOP就是以这种方式织入切面的。
		Spring AOP提供的4种类型的AOP支持
			1.基于代理的经典Spring AOP
			2.纯POJO切面
			3.@Aspect注解驱动的切面
			4.注入式AspectJ切面（适用于Spring各版本）
		Spring AOP构建在动态代理基础上，因此Spring对AOP的支持局限于方法拦截
		Spring通知是Java编写的
		Spring在运行时通知对象
		Spring只支持方法级别的连接点,但是方法拦截可以满足绝大部分的需求。 如果需要方法拦截之外的连接点拦截功能， 那么我们可以利用AspectJ来补充Spring AOP的功能。
	通过切点选择连接点	
		编写切点 限制匹配
			<aop:pointcut id="id" expression="execution(type package.class.function(arg)) && within(package.*)" />
		在切点中选择bean 匹配指定id的bean
			<aop:pointcut id="id1" expression="execution(type package.class.function(arg)) && within(package.*) and bean('id2')" />
	使用注解创建切面：
		@Aspect 创建切面
		@Pointcut("execution(** concert.Performance.perform(..))") 创建切点
		@Before("performance()") @AfterReturning("performance()") @AfterThrowing("performance()") 创建通知
		@EnableAspectJAutoProxy 启用代理
		将声明为@Aspect的POJO同时声明为@Component使用@EnableAspectJAutoProxy时会产生两个代理

-------------------------2017/11/22----
	1.切面捕捉某一方法不能捕捉方法内调用的该方法		
	通过注解引入新的功能
		使用Spring AOP， 我们可以为bean引入新的方法。代理拦截调用并委托给实现该方法的其他对象
		@DeclareParents
	Spring配置文件xml头部配置解释
		xml（Extensible Markup Language）可扩展标记语言
		xsd（XML Schema Definition）xml实例描述
		xmlns（XML Namespaces）xml命名空间
		xsi（xml schema instance）xml模式实例（元素所准守的规范）
		使用一个标签元素前声明方式：
			1.xmlns:aop="http://www.springframework.org/schema/aop"
			2.xsi:schemaLocation="http://www.springframework.org/schema/aop 
								  http://www.springframework.org/schema/aop/spring-aop.xsd"
	Spring配置文件xml标签解析逆推
		xml头部配置->命名空间(spring.schemas)->spring-命名空间.xsd->对应标签映射(spring.handles)->		路径.xxxNamespaceHandler(xxxNamespaceHandler extends NamespaceHandlerSupport)->具体子标签解析类(xxxBeanDefinitionParser implements BeanDefinitionParser)->匹配具体标签对应方法[BeanDefinition parse(Element element, ParserContext parserContext)]->String localName = parserContext.getDelegate().getLocalName(elt);
			  if ("pointcut".equals(localName)) {
			      parsePointcut(elt, parserContext);
			  } ->实例化[this.parseState.push(new PointcutEntry(id));]

	在XML中声明切面
		这样一种原则，那就是基于注解的配置要优于基于Java的配置， 基于Java的配置要优于基于XML的配置。但是，如果你需要声明切面， 但是又不能为通知类添加注解的时候，那么就必须转向XML配置了。

-------------------------2017/11/25----
	1.在XML中， “&”符号会被解析为实体的开始，所以xml中Join point的声明要用and.
	2.虽然Spring AOP能够满足许多应用的切面需求， 但是与AspectJ相比，Spring AOP 是一个功能比较弱的AOP解决方案。 AspectJ提供了SpringAOP所不能支持的许多类型的切点。	
	3.pointcut performance() : execution(concert.Guitar.new());	//定义构造器切点
	4.当Spring AOP不能满足需求时， 我们必须转向更为强大的AspectJ。

WEB中的Spring
	构建Spring Web应用程序
	1.Spring将请求在调度Servlet、处理器映射(handler mapping)、控制器以及视图解析器(view resolver)之间移动
	2.在请求离开浏览器时，会带有用户所请求内容的信息，至少会包含请求的URL。但是还可能带有其他的信息，例如用户提交的表单信息。
	3.请求旅程的第一站是Spring的DispatcherServlet[first]。在Spring MVC中，DispatcherServlet就是前端控制器。DispatcherServlet的任务是将请求发送给Spring MVC控制器(controller),控制器是一个用于处理请求的Spring组件。应用程序中可能会有多个控制器，DispatcherServlet需要知道应该将请求发送给哪个控制器。所以DispatcherServlet以会查询一个或多个处理器映射(handler mapping)[second]来确定请求的下一站在哪里。处理器映射会根据请求所携带的URL信息来进行决策。一旦选择了合适的控制器， DispatcherServlet会将请求发送给选中的控制器[third]。到了控制器，请求会卸下其负载(用户提交的信息)并耐心等待控制器处理这些信息。
	4.控制器在完成逻辑处理后，通常会产生一些信息，这些信息需要返回给用户并在浏览器上显示。这些信息被称为模型(model)[fourth]。不过仅仅给用户返回原始的信息是不够的——这些信息需要以用户友好的方式进行格式化，一般会是HTML。所以，信息需要发送给一个视图(view)，通常会是JSP。控制器所做的最后一件事就是将模型数据打包，并且标示出用于渲染输出的视图名。它接下来会将请求连同模型和视图名发送回DispatcherServlet。这样，控制器就不会与特定的视图相耦合，传递给DispatcherServlet的视图名并不直接表示某个特定的JSP。实际上，它甚至并不能确定视图就是JSP。相反，它仅仅传递了一个逻辑名称，这个名字将会用来查找产生结果的真正视图。DispatcherServlet将会使用视图解析器(view resolver)[fifth]来将逻辑视图名匹配为一个特定的视图实现，它可能是也可能不是JSP。DispatcherServlet已经知道由哪个视图渲染结果，那请求的任务基本上也就完成了。它的最后一站是视图的实现(可能是JSP)[sixth]，在这里它交付模型数据。请求的任务就完成了。视图将使用模型数据渲染输出，这个输出会通过响应对象[seventh]传递给客户端(不会像听上去那样硬编码)。

-------------------------2017/11/26----
	1.扩展AbstractAnnotationConfigDispatcherServletInitializer的任意类都会自动地配置DispatcherServlet和Spring应用上下文，Spring的应用上下文会位于应用程序的Servlet上下文之中。
	2.AbstractAnnotationConfigDispatcherServletInitializer实现了WebApplicationInitializer接口会被容器找到完成配置的任务
	3.SpittrWebAppInitializer(继承了AbstractAnnotationConfigDispatcherServletInitializer)重写了三个方法。第一个方法是getServletMappings()，它会将一个或多个路径映射到DispatcherServlet上。在本例中，它映射的是"/"，这表示它会是应用的默认Servlet。它会处理进入应用的所有请求。为了理解其他的两个方法，我们首先要理解DispatcherServlet和一个Servlet监听器(也就是ContextLoaderListener)的关系。
	4.当DispatcherServlet启动的时候，它会创建Spring应用上下文，并加载配置文件或配置类中所声明的bean。getServletConfigClasses()方法中，我们要求DispatcherServlet加载应用上下文时，使用定义在WebConfig配置类(使用Java配置)中的bean。但是在Spring Web应用中，通常还会有另外一个应用上下文通过getRootConfigClasses()。另外的这个应用上下文是由 ContextLoaderListener 创建的。我们希望DispatcherServlet加载包含Web组件的bean，如控制器、视图解析器以及处理器映射，而ContextLoaderListener要加载应用中的其他bean。这些bean通常是驱动应用后端的中间层和数据层组件。
启动 Spring MVC
	tomcat 6.0不支持Spring3.0
	@EnableWebMvc 启用Spring MVC
	@Controller 基于@Component 声明一个控制器也可以被组件扫描到
	@RequestMapping注解。 它的value属性指定了这个方法所要处理的请求路径，method属性细化了它所处理的HTTP方法。         @RequestMapping的value属性能够接受一个String类型的数组。  
定义类级别的请求处理
	在类级别上用@RequestMapping
传递模型数据到视图中
	模型中会存储一个Spittle列表，key为spittleList，然后这个列表会发送到名为spittles的视图中。
接受请求的输入
	Spring MVC允许以多种方式将客户端中的数据传送到控制器的处理器方法中，包括：
		1.查询参数(Query Parameter)
		2.表单参数(Form Parameter)
		3.路径变量(Path Variable)
	@RequestParam(value="key", defaultValue="value") value必须为String
	@PathVariable 占位符的名称要用大括号(“{”和“}”)括起来。路径中的其他部分要与所处理的请求完全匹配，但是占位符部分可以是任意的值。
	jsp获得${spittleList},因为它是一个List<Spittle>，因此，键将会推断为spittleList。
处理表单
	Java POJO Bean 对象与 Web Form 表单的自动装配，1.控制器方法匹配类 2.如果表单元素的名称和 Form Bean 属性名不一致则需要使用 keyMap 进行映射，反之不需
	重定向(redirect)和转发(forward)有一个重要的不同：当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。与之相反，重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。
	@Valid 有效
		@NotNull 不为空
  		@Size(min=2, max=30) 限制位数
  		@Email 限制Email格式

-------------------------2017/11/29----
	1.Spring自带了13个视图解析器， 能够将逻辑视图名转换为物理实现
	2.TilesViewResolver 用于 Apache Tiles视图 TilesViewResolver，控制JSP页面的布局。
	3.InternalResourceViewResolver会将视图名解析为JSP文件。另外,如果在你的JSP页面中使用了JSP标准标签库(JavaServer Pages Standard Tag Library,JSTL)的话,InternalResourceViewResolver能够将视图名解析为 JstlView 形式的JSP文件,从而将JSTL本地化和资源bundle变量暴露给JSTL的格式化(formatting)和信息(message)标签。
	4.Spring提供了两个JSP标签库，一个用于表单到模型的绑定，另一个提供了通用的工具类特性。
将表单绑定到模型上
	Spring的表单绑定JSP标签库包含了14个标签，它们中的大多数都用来渲染HTML中的表单标签。它们与原生 HTML标签的区别在于它们会绑定模型中的一个对象，能够根据模型中对象的属性填充值。标签库中还包含了一个为用户展现错误的标签，它会将错误信息渲染到最终的HTML之中。
	@NotBlank 不能为空白(不能只有空白格)
	@NotEmpty=@NotNull
展现国际化信息
	ReloadableResourceBundleMessageSource.setBasename(path)文件目录path为'file:///路径'，根类路径path为'路径'
jsp显示中文
	<%@ page language="java" import="java.util.*" contentType="text/html; charset=UTF-8" %>
使用Thymeleaf
	